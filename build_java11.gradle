// Copyright (c) 2003-2018 Broad Institute, Inc., Massachusetts Institute of Technology, and Regents 
// of the University of California. All rights reserved.
apply plugin: 'java'
import org.apache.tools.ant.filters.ReplaceTokens

ext.moduleName = 'org.gsea_msigdb.xmlbrowser'
ext.mainClassName = 'xapps.browser.gsea.MSigDB_XML_Browser'

// Put the Java 11 build into a special dir to avoid accidental collisions.
// Despite this, it is recommended that Java 8 vs. 11 builds be run in different locations.
buildDir = 'build_java11'

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/main/java11']
        }
    }
}

configurations {
    jidePatchModuleLibs
}

dependencies {
    compile fileTree(dir: 'modules', include: '*.jar')
    jidePatchModuleLibs fileTree(dir: 'lib', include: '*.jar')
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}

// Gradle bug prevents us from generating Java 11 bytecode: https://github.com/gradle/gradle/issues/5120
// Workaround is to target Java 10 for now.
sourceCompatibility = 10
targetCompatibility = 10

processResources {
    // Set the current timestamp for release builds; pass in a blank property to enable (i.e. -Ptimestamp="" at CLI)
    if (timestamp.equals("")) { timestamp = new Date().format("EEE, d MMM yyyy HH:mm:ss Z") }

    filesMatching('edu/mit/broad/msigdb_browser/genome/resources/build.properties') {
        filter (ReplaceTokens,
                tokens: [ VERSION: version, VERSION_MAJOR: versionMajor, VERSION_MINOR: versionMinor, VERSION_PATCH: versionPatch,
                          BUILD: buildNumber, TIMESTAMP: timestamp ])
    }
}

jar {
    archiveName = "msigdb-xml-browser-minimal-${version}.jar"
    manifest {
        attributes(
            "Permissions": "all-permissions",
            "Application-Name": "MSigDB_XML_Browser",
            "Built-By": System.getProperty('user.name'),
            "MSigDB_XML_Browser-Build-Date": timestamp,
            "Main-Class": mainClassName,
        )
    }
}

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
            '--patch-module=jide.common=' + configurations.jidePatchModuleLibs.asPath,
            "--add-exports=jide.common/com.jidesoft.grid=${moduleName}",
            "--add-exports=jide.common/com.jidesoft.docking=${moduleName}",
            "--add-exports=jide.common/com.jidesoft.status=${moduleName}"
        ]
        classpath = files()
    }
}

task createDist(type: Copy, dependsOn: jar)  {
    from ("src/main/resources/edu/mit/broad/msigdb_browser/genome/resources/icon_64x64.png")
    from ('scripts/java11') {
        include 'msigdb-xml-browser*'
        include 'readme.txt'
    }
    with copySpec {
        from ("${buildDir}/libs")
        from ("modules")
        into "modules"
    }
    with copySpec {
        from ("lib") into "lib"
    }
    into "${buildDir}/MSigDB_XML_Browser-dist"
}

task createLinuxDistZip(type: Zip, dependsOn: createDist) {
    baseName = "MSigDB_XML_Browser_Linux"
    archiveName = createLinuxDistZip.baseName + "_${version}.zip"
    destinationDir = file("${buildDir}/distZip")
    if (!jdkBundleLinux.equals("")) {
        with copySpec { from jdkBundleLinux into "jdk-11" }
    }
    from ("${buildDir}/MSigDB_XML_Browser-dist") {
        exclude "*.bat"
        exclude "*.command"
    }
    into createLinuxDistZip.baseName + "_${version}"

    doLast {
        project.exec { commandLine('chmod', '775', createLinuxDistZip.archivePath ) }
    }
}

task createMacDistZip(type: Zip, dependsOn: createDist) {
    baseName = "MSigDB_XML_Browser_Mac"
    archiveName = createMacDistZip.baseName + "_${version}.zip"
    destinationDir = file("${buildDir}/distZip")
    if (!jdkBundleMac.equals("")) {
        with copySpec { from jdkBundleMac into "jdk-11" }
    }
    from ("${buildDir}/MSigDB_XML_Browser-dist") {
        exclude "*.bat"
        exclude "*_hidpi.sh"
    }
    into createMacDistZip.baseName + "_${version}"

    doLast {
        project.exec { commandLine('chmod', '775', createMacDistZip.archivePath ) }
    }
}

task createMacAppDist(type: Copy, dependsOn: createDist) {
    if (!jdkBundleMac.equals("")) {
        with copySpec { from jdkBundleMac into "MSigDB_XML_Browser_${version}.app/Contents/jdk-11" }
    }
    with copySpec {
        from ("scripts/mac.app") {
            exclude "Contents/Info.plist.template"
            exclude "Contents/MacOS/JavaAppLauncher"
        }
        into "MSigDB_XML_Browser_${version}.app"
    }
    with copySpec {
        from ("scripts/java11/Info.plist.template")
        filter (ReplaceTokens, tokens: [ VERSION: version ])
        rename "Info.plist.template", "Info.plist"
        into "MSigDB_XML_Browser_${version}.app/Contents"
    }
    with copySpec {
        from ("scripts/java11/MSigDB_XML_Browser_mac.app.command")
        rename "MSigDB_XML_Browser_mac.app.command", "MSigDB_XML_Browser"
        into "MSigDB_XML_Browser_${version}.app/Contents/MacOS"
    }
    with copySpec {
        from ("src/main/resources/edu/mit/broad/msigdb_browser/genome/resources/icon_64x64.png")
        into "MSigDB_XML_Browser_${version}.app/Contents/Resources"
    }
    with copySpec {
        from ("${buildDir}/MSigDB_XML_Browser-dist/") include 'msigdb-xml-browser.args'
        into "MSigDB_XML_Browser_${version}.app/Contents/Java/"
    }
    with copySpec {
        from ("${buildDir}/MSigDB_XML_Browser-dist/modules") include '*.jar'
        into "MSigDB_XML_Browser_${version}.app/Contents/Java/modules"
    }
    with copySpec {
        from ("${buildDir}/MSigDB_XML_Browser-dist/lib") include '*.jar'
        into "MSigDB_XML_Browser_${version}.app/Contents/Java/lib"
    }
    into "${buildDir}/MSigDB_XML_Browser-MacApp-dist"

    doLast {
        project.exec { commandLine('chmod', '775', "${buildDir}/MSigDB_XML_Browser-MacApp-dist/MSigDB_XML_Browser_${version}.app" ) }
    }
}

task createMacAppDistZip(type: Zip, dependsOn: createMacAppDist) {
    archiveName = "MSigDB_XML_Browser_${version}.app.zip"
    destinationDir = file("${buildDir}/distZip")
    from "${buildDir}/MSigDB_XML_Browser-MacApp-dist"
    
    doLast {
        project.exec { commandLine('chmod', '775', createMacAppDistZip.archivePath ) }
    }
}

task createWinDist(type: Copy, dependsOn: createDist) {
    if (!jdkBundleWindows.equals("")) {
        with copySpec { from jdkBundleWindows into "MSigDB_XML_Browser_${version}/jdk-11" }
    }
    with copySpec {
        from("${buildDir}/MSigDB_XML_Browser-dist") {
            exclude "*.sh"
            exclude "*.command"
        }
        from ("scripts/nsis") { include "XMLBrowser_Icon.ico" }
        into "MSigDB_XML_Browser_${version}"
    }
    with copySpec {
        // Create a build-specific NSIS installer script.
        from ("scripts/nsis/installer.nsi")
        filter (ReplaceTokens, tokens: [ VERSION: version ])
    }
    from ("scripts/nsis") { include "LICENSE_WIN.txt" }
    into "${buildDir}/MSigDB_XML_Browser-WinExe-dist"
}

task createWinExeDist(type: Exec, dependsOn: createWinDist) {
    commandLine(makensisCommand, "-O${buildDir}/tmp/nsis-build.log",
                "${buildDir}/MSigDB_XML_Browser-WinExe-dist/installer.nsi")
    doLast {
        if (makensisCommand.equals("")) {
            throw new GradleException("Required property not set: makensisCommand");
        }
    }
}
        
task signWinExeDist(type: Exec, dependsOn: createWinExeDist) {
    standardInput = new ByteArrayInputStream( keyPassword.getBytes() );
    commandLine(signcodeCommand, "-spc", spcFile, "-v", pvkFile, "-a", "sha1", 
                "-\$", "commercial", "-n", "MSigDB_XML_Browser ${version}", "-i", "http://www.gsea-msigdb.org/",
                "-t", tsaurl, "-tr", "10", "${buildDir}/MSigDB_XML_Browser-WinExe-dist/MSigDB_XML_Browser_${version}-installer.exe")
    doLast {
        if (signcodeCommand.equals("")) {
            throw new GradleException("Required property not set: signcodeCommand");
        }
    }
}

build.dependsOn createLinuxDistZip,createMacAppDistZip

if (!makensisCommand.equals("") && !signcodeCommand.equals("")) {
    build.dependsOn signWinExeDist
}